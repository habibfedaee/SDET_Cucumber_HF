>> FrameWork                Sat 04/23/2022
Gherkin language:

>>  Keywords:
    {Given, When, And, Then}

>> Scenario: (Test-case)
    Given = Pre-condition
    When  = Actions we need to perform
    And   = Supporting tag
    Then  = Expected results

RECAP: Mon 04/25/2022

>> Framework:
   It is an organized structure of folders and packages which allows us to write clean and maintainable
   code.

   Build management tool:
   - maven

   POM.xml
   is the main configuration file in maven project.

   Two directories in SRC folder:
   - main --> folder to hold developers' codes and resources
   - test --> folder to hold testers' codes and resources
        --> java        --> for tech/coding we use java directory
        --> resources   --> for non-technical/coding we use resources directory

   cucumber:
   - it supports BDD
   - we use Gherkin language (plain english language) to write the scenarios
   - it works

    Scenario:
     - is a test case
        - given:    pre-condition
        - when:     actions to be performed
        - and:      supporting tag
        - then:     expected result
     Example:
     US 12345 employee search
     (1st) way:
     Scenario search employee by id
     Given user is navigated to HRMS application
     When user enters valid admin credentials
     And user clicks on login button
     And user navigates to employee list page
     When user enters valid employee <id>
     And clicks on search button
     Then user is able to see employee information
     (2nd) way:
     Scenario search employee by name
     Given user is navigated to HRMS application
     When user enters valid admin credentials
     And user clicks on login button
     And user navigates to employee list page
     When user enters valid employee <name>
     And clicks on search button
     Then user is able to see employee information


    *** File where we write BDD scenarios is feature file
    this file has .feature extension

    Steps to create a test case in intellij:
    1. create a folder named 'features' inside test/resources
    2. create a folder named 'steps' inside test/java
    3. inside features folder create  file 'EmployeeSearch.features'
    4. inside .features file create the scenario by: Typing
      4.1  Feature: US-12345 - Search an employee in HRMS
             Scenario: Search an employee by id
               Given user is navigated to the HRMS application
               When user enters valid admin credentials
               And user clicks on login button
               And user is navigated to employee list page
               When user enters valid employee id
               And user clicks on search button
               Then user is able to see employee information
      4.2 save the file
      4.3 Hover mouse over the line with Scenario keyword and run it
      4.4 when results appear in console copy the generated method declarations
    5. create a java class named 'EmployeeSearchSteps.java'
       5.1 paste the copied method declarations from console
       5.2 import the classes required in tags with red color
       5.3 MOVING to each steps' Java Method:
          5.3.1 right-click on the step
          5.3.2 choose 'go to'
          5.3.3 click on 'Declaration or Usages'

Class 03:           Tue-04/26/2022
RECAP:
We use feature file to write our scenarios
 - search employee by id
 - search employee by name

In feature file we write scenarios using gherkin language
keywords: Given, When, And, Then, scenario, Feature.


Class 04:          Wed-04/27/2022
Recap:
 - implemented code for some scenarios both old way and new way using newly created methods in
 commonMethod class.
 - CommonMethods class in our framework is used to write all the methods we will be using in
 majority of scenarios ( concept: code re-usability)

 methods:
 sendText(), click(), getWait() etc.

 In Constants class we added two instance variables:
 - implicit_wait
 - explicit_wait

 POM, page object model is a design pattern in our framework.
 According page object model, we have to create separate page classes for all available pages in the
 application.
 Example:
 Screens: Login         -->         Dashboard           -->             Add Employee
          loginPage                 dashboardPage                       addEmployeePage




